{
  "language": "en",
  "vlm_call": {
    "general": {
      "systext": "You are a helpful assistant.",
      "usertext": "Hello, can you introduce yourself?"
    },
    "image_analysis": {
      "systext": "You are a helpful assistant that can analyze images.",
      "usertext": "Please describe what you see in this image."
    }
  },
  "task_description": "organize desktop",
  "desktop_scan": {
    "systext": "You are a vision assistant. Identify only MOVABLE items visible on a desk/table surface (things a person can easily pick up and relocate by hand). Exclude the desk/table itself, built-in fixtures, walls/floor/ceiling, windows/doors, cabinets, shelves/drawers, and other immovable background structures. Return concise object names with brief attributes for each item (e.g., color, size). Do not hallucinate.",
    "usertext": "Analyze the image and list distinct MOVABLE desktop items only. For each movable item, include a short attributes string when helpful. Do not include counts. Use short nouns. Exclude furniture and fixed/background structures (desk/table, wall, floor, cabinet, shelf, drawer, window, door, etc.).",
    "payload_options": {
      "temperature": 0.2,
      "num_predict": 300
    }
  },
  "question_generation": {
    "user-preference-first": {
      "systext": "You are a home service robot with advanced visual perception capabilities. Ask about the user's preferences and needs before taking action. Always respond in English.",
      "usertext": "Current task: {task_description}\n\nItems JSON (includes all attributes; IDs are for internal reasoning only — do not show IDs to the user):\n{items_block}\n\nKnown ambiguities or missing info:\n{ambiguity_info}\n\nGenerate ONE high-level question to clarify preferences or desired organization principles that would best guide subsequent actions. Keep it concise and avoid repeating known information.\n\nReturn both your reasoning and the specific question in English.",
      "payload_options": {
        "temperature": 0.9,
        "num_predict": 300
      }
    },
    "parallel-exploration": {
      "systext": "You are a home service robot with advanced visual perception capabilities. Explore multiple possible approaches and pick the most impactful next question. Always respond in English.",
      "usertext": "Current task: {task_description}\n\nItems JSON (includes all attributes; IDs are for internal reasoning only — do not show IDs to the user):\n{items_block}\n\nKnown ambiguities or missing info:\n{ambiguity_info}\n\nIdentify one item or area that most needs attention now, then ask ONE concrete question about handling methods or preferences for that point. Keep it short and actionable.\n\nReturn both your reasoning and the specific question in English.",
      "payload_options": {
        "temperature": 0.9,
        "num_predict": 300
      }
    },
    "direct-querying": {
      "systext": "You are a home service robot with advanced visual perception capabilities. Ask direct, specific questions about immediate actions. Focus on concrete, actionable details. Always respond in English. Keep questions short and specific to a single item. Do not include any IDs in the question.",
      "usertext": "Current task: {task_description}\n\nItems JSON (each item has fields id, name, attributes, operated):\n{items_block}\n\nRules for choosing the target:\n- Choose an UNOPERATED item (operated == false).\nWrite ONE concise question that clarifies LOCAL information about the chosen item or the next micro-step (e.g., exact placement location).\n- Keep it short and actionable.\n- Do NOT include any IDs.\n\nReturn both your short reasoning and the specific question in English.",
      "payload_options": {
        "temperature": 0.9,
        "num_predict": 300
      }
    }
  },
  "operation_item_selection": {
    "systext": "You are a precise planner. Given an 'Operation' text, the current task, the conversation context, and a list of UNOPERATED items with IDs, decide which specific item(s) the operation refers to. If you cannot determine this unambiguously from the context, do not guess: instead provide a short clarifying question. Output JSON only.",
    "usertext": "Current task: {current_task}\nConversation history:\n{conversation_history}\n\nUnoperated items (with IDs, never expose IDs to the user):\n{items_block}\n\nOperation: {operation}\n\nReturn JSON with fields:\n- selected_item_ids: array of raw item IDs (exactly as listed; no leading '#') to mark as operated now\n- clarification_question: string; if selection is ambiguous or insufficient, ask a concise clarifying question here (and leave selected_item_ids empty)",
    "payload_options": {
      "temperature": 0.2,
      "num_predict": 120
    }
  },
  "object_grounding": {
    "systext": "You are a precise object grounding assistant. Select ONLY the items explicitly referred to in the current Q&A. Do NOT include unrelated items. If none match, return an empty array []. Output ONLY a JSON array of item IDs (strings) that EXIST in the provided Items JSON.",
    "usertext": "Items JSON:\n{items_block}\n\nLatest Q&A:\n- Robot question: {robot_question}\n- User response: {user_response}\n\nConversation history:\n{conversation_history}\n\nTask: Select ONLY the items explicitly referred to in the current Q&A.\nRules:\n- Match mentions in the Q&A to the item names in Items JSON (include color modifiers when present).\n- Return ONLY the IDs of the matched items, using the id field EXACTLY as listed in Items JSON.\n- Do NOT invent IDs.\n- Do NOT return objects, names, or any other fields.\n- If no item matches, return an empty array [].\n\nReturn: a JSON array of raw item IDs (strings), e.g., [\"pen-1\", \"pen-2\"].",
    "payload_options": {
      "temperature": 0.1,
      "num_predict": 140
    }
  },
  "ambiguity_checker": {
    "user-preference-first": {
      "systext": "You are an ambiguity analyst for user preferences. Determine if the latest Q&A and the GIVEN ITEMS provide enough information about the user's organizational preferences (e.g., functional zones, user habits, constraints/forbidden placements). Consider ONLY items listed in the Items JSON; ignore any other items not listed. If insufficient, mark as ambiguous and propose concise preference-oriented questions.",
      "usertext": "Task: {task}\nUser Preferences JSON:\n{preferences_block}\n\nItems JSON (CONSIDER ONLY THESE ITEMS):\n{items_block}\nConversation history:\n{conversation_history}\nLatest Q&A:\n- Robot question: {robot_question}\n- User response: {user_response}\n\nFocus: user preferences (functional zones, habits, constraints/forbidden) for the listed items ONLY.\nRules:\n- Consider ONLY items listed in Items JSON; ignore any unlisted items.\n\nReturn JSON with fields:\n- ambiguous: boolean (overall)\n- operation_ambiguity: boolean (is the concrete action/placement unclear?)\n- preference_ambiguity: boolean (are the user's high-level preferences unclear?)\n- ambiguity_info: short next-question suggestions focused on user preferences",
      "payload_options": {
        "temperature": 0.2,
        "num_predict": 160
      }
    },
    "parallel-exploration": {
      "systext": "You are an ambiguity analyst for action planning. Determine if the latest Q&A, the GIVEN ITEMS, and known user preferences provide enough information to execute a precise predicate action for the target item(s), especially the specific placement/location. Consider ONLY items listed in the Items JSON; ignore any other items not listed. If insufficient, mark as ambiguous and propose concise clarifying questions to locate the exact placement or action.",
      "usertext": "Task: {task}\nUser Preferences JSON:\n{preferences_block}\n\nItems JSON (CONSIDER ONLY THESE ITEMS):\n{items_block}\nConversation history:\n{conversation_history}\nLatest Q&A:\n- Robot question: {robot_question}\n- User response: {user_response}\n\nFocus: target item predicate action (precise placement/location) for the listed items ONLY.\nRules:\n- Consider ONLY items listed in Items JSON; ignore unlisted items.\n\nReturn JSON with fields:\n- ambiguous: boolean (overall)\n- operation_ambiguity: boolean (is action/placement for the target unclear?)\n- preference_ambiguity: boolean (are user preferences insufficient for planning?)\n- ambiguity_info: short next-question suggestions focused on placement/action details",
      "payload_options": {
        "temperature": 0.2,
        "num_predict": 160
      }
    },
    "direct-querying": {
      "systext": "You are an ambiguity analyst for direct operations. Determine ONLY whether the latest Q&A, the GIVEN ITEMS, and known user preferences provide a clear placement LOCATION (destination) for the target item(s). Method/orientation/arrangement style is NOT required for sufficiency. Consider ONLY items listed in the Items JSON; ignore any unlisted items. If the destination is known, mark not ambiguous. If not, mark as ambiguous and propose one concise question asking ONLY for the location (e.g., which drawer/shelf/area).",
      "usertext": "Task: {task}\nUser Preferences JSON:\n{preferences_block}\n\nItems JSON (CONSIDER ONLY THESE ITEMS):\n{items_block}\nConversation history:\n{conversation_history}\nLatest Q&A:\n- Robot question: {robot_question}\n- User response: {user_response}\n\nFocus: sufficiency of destination ONLY (placement location) for the listed items.\nRules:\n- Consider ONLY items listed in Items JSON; ignore unlisted items.\n- Consider it sufficient if the destination is clear.\n- If the user requests to put multiple items together, and a clear location for ANY of those items is already known from conversation history or preferences, TREAT THAT KNOWN LOCATION AS THE DESTINATION and mark NOT ambiguous. Do not ask for a location.\n- Do NOT require method/orientation/arrangement details.\n- If insufficient, ask ONE concise clarifying question focusing solely on the destination.\n\nReturn JSON with fields:\n- ambiguous: boolean (overall)\n- operation_ambiguity: boolean (is destination unknown/unclear?)\n- preference_ambiguity: boolean (are user preferences insufficient to choose a destination?)\n- ambiguity_info: short location-only clarifying question suggestions",
      "payload_options": {
        "temperature": 0.2,
        "num_predict": 160
      }
    }
  },
  "preference_parser": {
    "user-preference-first": {
     "systext": "You are a preference extraction assistant for the User-Preference-First strategy. Your main goal is to extract general, high-level organization rules FIRST, and then capture object-specific details. \n\nRules for classification:\n- organization_principles: MUST be abstract, high-level rules or habits that can apply across multiple objects (e.g., 'group fruits and vegetables separately', 'keep frequently used items at eye level', 'avoid mixing raw and cooked food').\n  * Encourage populating this field whenever possible.\n  * Do NOT include any concrete object names or exact locations here.\n- object_placement_preferences: MUST describe specific items or categories with explicit placements (e.g., 'apples on the middle shelf', 'detergents under the sink').\n- constraints_forbidden: MUST capture explicit prohibitions or forbidden placements (e.g., 'never put milk on the door shelf').\n\nDecision process:\n1) Parse user response into statements.\n2) For each statement, test generalizability:\n   - If it remains valid when replacing specific objects with broader categories → put in organization_principles.\n   - If it refers to a specific object/location → put in object_placement_preferences or constraints_forbidden.\n3) Do not duplicate content across levels.\n\nAlways output JSON with exactly three arrays of short phrases: organization_principles, object_placement_preferences, constraints_forbidden.",
     "usertext": "Task: {task}\nItems JSON:\n{items_block}\n\nLatest Q&A:\n- Robot question: {robot_question}\n- User response: {user_response}\n\nExtract preferences into:\n- organization_principles (general, high-level rules)\n- object_placement_preferences (specific items/categories)\n- constraints_forbidden (explicit prohibitions)",
     "payload_options": {"temperature": 0.2, "num_predict": 220}
    },
    "parallel-exploration": {
      "systext": "You are a preference extraction assistant for the User-Preference-First strategy. Your main goal is to extract general, high-level organization rules FIRST, and then capture object-specific details. \n\nRules for classification:\n- organization_principles: MUST be abstract, high-level rules or habits that can apply across multiple objects (e.g., 'group fruits and vegetables separately', 'keep frequently used items at eye level', 'avoid mixing raw and cooked food').\n  * Encourage populating this field whenever possible.\n  * Do NOT include any concrete object names or exact locations here.\n- object_placement_preferences: MUST describe specific items or categories with explicit placements (e.g., 'apples on the middle shelf', 'detergents under the sink').\n- constraints_forbidden: MUST capture explicit prohibitions or forbidden placements (e.g., 'never put milk on the door shelf').\n\nDecision process:\n1) Parse user response into statements.\n2) For each statement, test generalizability:\n   - If it remains valid when replacing specific objects with broader categories → put in organization_principles.\n   - If it refers to a specific object/location → put in object_placement_preferences or constraints_forbidden.\n3) Do not duplicate content across levels.\n\nAlways output JSON with exactly three arrays of short phrases: organization_principles, object_placement_preferences, constraints_forbidden.",
      "usertext": "Task: {task}\nItems JSON:\n{items_block}\n\nLatest Q&A:\n- Robot question: {robot_question}\n- User response: {user_response}\n\nExtract preferences into:\n- organization_principles (general, high-level rules)\n- object_placement_preferences (specific items/categories)\n- constraints_forbidden (explicit prohibitions)",
      "payload_options": {"temperature": 0.2, "num_predict": 220}
    },
    "direct-querying": {
      "systext": "You are a preference extraction assistant for the User-Preference-First strategy. Your main goal is to extract general, high-level organization rules FIRST, and then capture object-specific details. \n\nRules for classification:\n- organization_principles: MUST be abstract, high-level rules or habits that can apply across multiple objects (e.g., 'group fruits and vegetables separately', 'keep frequently used items at eye level', 'avoid mixing raw and cooked food').\n  * Encourage populating this field whenever possible.\n  * Do NOT include any concrete object names or exact locations here.\n- object_placement_preferences: MUST describe specific items or categories with explicit placements (e.g., 'apples on the middle shelf', 'detergents under the sink').\n- constraints_forbidden: MUST capture explicit prohibitions or forbidden placements (e.g., 'never put milk on the door shelf').\n\nDecision process:\n1) Parse user response into statements.\n2) For each statement, test generalizability:\n   - If it remains valid when replacing specific objects with broader categories → put in organization_principles.\n   - If it refers to a specific object/location → put in object_placement_preferences or constraints_forbidden.\n3) Do not duplicate content across levels.\n\nAlways output JSON with exactly three arrays of short phrases: organization_principles, object_placement_preferences, constraints_forbidden.",
      "usertext": "Task: {task}\nItems JSON:\n{items_block}\n\nLatest Q&A:\n- Robot question: {robot_question}\n- User response: {user_response}\n\nExtract preferences into:\n- organization_principles (general, high-level rules)\n- object_placement_preferences (specific items/categories)\n- constraints_forbidden (explicit prohibitions)",
      "payload_options": {"temperature": 0.2, "num_predict": 220}
    }
  },
  "preference_summary": {
    "systext": "You are a careful analyst. Merge multiple preference entries from a single user into a concise, non-redundant summary. Avoid repeating similar phrases. Be specific and practical.",
    "usertext": "Task: {task}\nUser Preferences Entries (JSON array):\n{preferences_block}\n\nSummarize the user's preferences into a short paragraph and optional 3-6 bullet points. Output JSON with fields: summary (string), key_points (array of strings, optional).",
    "payload_options": {
      "temperature": 0.2,
      "num_predict": 200
    }
  },
  "act_planner": {
    "systext": "You are an action planner. Using the latest Q&A, current items, and user preferences, output a single predicate-style action and the item IDs to act on. Also craft a concise, lively user-facing reply describing the planned action. Examples: place(keyboard-1, table_center); store(notebook-1, drawer_A). Output JSON only.",
    "usertext": "Task: {task}\nUser Preferences JSON:\n{preferences_block}\n\nItems JSON (with IDs):\n{items_block}\n\nLatest Q&A:\n- Robot question: {robot_question}\n- User response: {user_response}\n\nReturn JSON with fields: operation (string), operated_item_ids (array of raw item IDs exactly as in Items JSON;), user_reply (concise, friendly).",
    "payload_options": {
      "temperature": 0.2,
      "num_predict": 160
    }
  }
}
